/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardCoursesCourseNameRouteImport } from './routes/dashboard/courses.$courseName'
import { Route as DashboardCoursesCourseNameModuleModuleIdRouteImport } from './routes/dashboard/courses.$courseName.module.$moduleId'
import { Route as DashboardCoursesCourseNameModuleModuleIdIndexRouteImport } from './routes/dashboard/courses.$courseName.module.$moduleId.index'
import { Route as DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRouteImport } from './routes/dashboard/courses.$courseName.module.$moduleId.resources.$resourceId'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardCoursesCourseNameRoute =
  DashboardCoursesCourseNameRouteImport.update({
    id: '/courses/$courseName',
    path: '/courses/$courseName',
    getParentRoute: () => DashboardRoute,
  } as any)
const DashboardCoursesCourseNameModuleModuleIdRoute =
  DashboardCoursesCourseNameModuleModuleIdRouteImport.update({
    id: '/module/$moduleId',
    path: '/module/$moduleId',
    getParentRoute: () => DashboardCoursesCourseNameRoute,
  } as any)
const DashboardCoursesCourseNameModuleModuleIdIndexRoute =
  DashboardCoursesCourseNameModuleModuleIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardCoursesCourseNameModuleModuleIdRoute,
  } as any)
const DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRoute =
  DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRouteImport.update(
    {
      id: '/resources/$resourceId',
      path: '/resources/$resourceId',
      getParentRoute: () => DashboardCoursesCourseNameModuleModuleIdRoute,
    } as any,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/courses/$courseName': typeof DashboardCoursesCourseNameRouteWithChildren
  '/dashboard/courses/$courseName/module/$moduleId': typeof DashboardCoursesCourseNameModuleModuleIdRouteWithChildren
  '/dashboard/courses/$courseName/module/$moduleId/': typeof DashboardCoursesCourseNameModuleModuleIdIndexRoute
  '/dashboard/courses/$courseName/module/$moduleId/resources/$resourceId': typeof DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/courses/$courseName': typeof DashboardCoursesCourseNameRouteWithChildren
  '/dashboard/courses/$courseName/module/$moduleId': typeof DashboardCoursesCourseNameModuleModuleIdIndexRoute
  '/dashboard/courses/$courseName/module/$moduleId/resources/$resourceId': typeof DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/courses/$courseName': typeof DashboardCoursesCourseNameRouteWithChildren
  '/dashboard/courses/$courseName/module/$moduleId': typeof DashboardCoursesCourseNameModuleModuleIdRouteWithChildren
  '/dashboard/courses/$courseName/module/$moduleId/': typeof DashboardCoursesCourseNameModuleModuleIdIndexRoute
  '/dashboard/courses/$courseName/module/$moduleId/resources/$resourceId': typeof DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/'
    | '/dashboard/courses/$courseName'
    | '/dashboard/courses/$courseName/module/$moduleId'
    | '/dashboard/courses/$courseName/module/$moduleId/'
    | '/dashboard/courses/$courseName/module/$moduleId/resources/$resourceId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/dashboard/courses/$courseName'
    | '/dashboard/courses/$courseName/module/$moduleId'
    | '/dashboard/courses/$courseName/module/$moduleId/resources/$resourceId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/'
    | '/dashboard/courses/$courseName'
    | '/dashboard/courses/$courseName/module/$moduleId'
    | '/dashboard/courses/$courseName/module/$moduleId/'
    | '/dashboard/courses/$courseName/module/$moduleId/resources/$resourceId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/courses/$courseName': {
      id: '/dashboard/courses/$courseName'
      path: '/courses/$courseName'
      fullPath: '/dashboard/courses/$courseName'
      preLoaderRoute: typeof DashboardCoursesCourseNameRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/courses/$courseName/module/$moduleId': {
      id: '/dashboard/courses/$courseName/module/$moduleId'
      path: '/module/$moduleId'
      fullPath: '/dashboard/courses/$courseName/module/$moduleId'
      preLoaderRoute: typeof DashboardCoursesCourseNameModuleModuleIdRouteImport
      parentRoute: typeof DashboardCoursesCourseNameRoute
    }
    '/dashboard/courses/$courseName/module/$moduleId/': {
      id: '/dashboard/courses/$courseName/module/$moduleId/'
      path: '/'
      fullPath: '/dashboard/courses/$courseName/module/$moduleId/'
      preLoaderRoute: typeof DashboardCoursesCourseNameModuleModuleIdIndexRouteImport
      parentRoute: typeof DashboardCoursesCourseNameModuleModuleIdRoute
    }
    '/dashboard/courses/$courseName/module/$moduleId/resources/$resourceId': {
      id: '/dashboard/courses/$courseName/module/$moduleId/resources/$resourceId'
      path: '/resources/$resourceId'
      fullPath: '/dashboard/courses/$courseName/module/$moduleId/resources/$resourceId'
      preLoaderRoute: typeof DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRouteImport
      parentRoute: typeof DashboardCoursesCourseNameModuleModuleIdRoute
    }
  }
}

interface DashboardCoursesCourseNameModuleModuleIdRouteChildren {
  DashboardCoursesCourseNameModuleModuleIdIndexRoute: typeof DashboardCoursesCourseNameModuleModuleIdIndexRoute
  DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRoute: typeof DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRoute
}

const DashboardCoursesCourseNameModuleModuleIdRouteChildren: DashboardCoursesCourseNameModuleModuleIdRouteChildren =
  {
    DashboardCoursesCourseNameModuleModuleIdIndexRoute:
      DashboardCoursesCourseNameModuleModuleIdIndexRoute,
    DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRoute:
      DashboardCoursesCourseNameModuleModuleIdResourcesResourceIdRoute,
  }

const DashboardCoursesCourseNameModuleModuleIdRouteWithChildren =
  DashboardCoursesCourseNameModuleModuleIdRoute._addFileChildren(
    DashboardCoursesCourseNameModuleModuleIdRouteChildren,
  )

interface DashboardCoursesCourseNameRouteChildren {
  DashboardCoursesCourseNameModuleModuleIdRoute: typeof DashboardCoursesCourseNameModuleModuleIdRouteWithChildren
}

const DashboardCoursesCourseNameRouteChildren: DashboardCoursesCourseNameRouteChildren =
  {
    DashboardCoursesCourseNameModuleModuleIdRoute:
      DashboardCoursesCourseNameModuleModuleIdRouteWithChildren,
  }

const DashboardCoursesCourseNameRouteWithChildren =
  DashboardCoursesCourseNameRoute._addFileChildren(
    DashboardCoursesCourseNameRouteChildren,
  )

interface DashboardRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardCoursesCourseNameRoute: typeof DashboardCoursesCourseNameRouteWithChildren
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardCoursesCourseNameRoute: DashboardCoursesCourseNameRouteWithChildren,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
